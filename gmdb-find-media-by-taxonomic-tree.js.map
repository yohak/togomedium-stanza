{"version":3,"file":"gmdb-find-media-by-taxonomic-tree.js","sources":["../../../home/runner/work/togomedium-stanza/togomedium-stanza/stanzas/gmdb-find-media-by-taxonomic-tree/components/TreeBranchView.tsx","../../../home/runner/work/togomedium-stanza/togomedium-stanza/stanzas/gmdb-find-media-by-taxonomic-tree/functions/proessTaxonInfo.ts","../../../home/runner/work/togomedium-stanza/togomedium-stanza/stanzas/gmdb-find-media-by-taxonomic-tree/states/selectedTaxon.ts","../../../home/runner/work/togomedium-stanza/togomedium-stanza/stanzas/gmdb-find-media-by-taxonomic-tree/states/taxonList.ts","../../../home/runner/work/togomedium-stanza/togomedium-stanza/stanzas/gmdb-find-media-by-taxonomic-tree/components/TaxonomicTreeBranch.tsx","../../../home/runner/work/togomedium-stanza/togomedium-stanza/stanzas/gmdb-find-media-by-taxonomic-tree/hooks/useInitTaxonTree.ts","../../../home/runner/work/togomedium-stanza/togomedium-stanza/stanzas/gmdb-find-media-by-taxonomic-tree/components/TaxonomicTreeSection.tsx","../../../home/runner/work/togomedium-stanza/togomedium-stanza/stanzas/gmdb-find-media-by-taxonomic-tree/components/AppContainer.tsx","../../../home/runner/work/togomedium-stanza/togomedium-stanza/stanzas/gmdb-find-media-by-taxonomic-tree/App.tsx","../../../home/runner/work/togomedium-stanza/togomedium-stanza/stanzas/gmdb-find-media-by-taxonomic-tree/index.tsx"],"sourcesContent":["import { css } from \"@emotion/react\";\nimport { Tooltip } from \"@mui/material\";\nimport Checkbox from \"@mui/material/Checkbox\";\nimport React, { FC } from \"react\";\nimport { AcceptsEmotion } from \"yohak-tools\";\nimport {\n  IconCompact,\n  IconExpand,\n  IconNoChildren,\n  IconBlank,\n} from \"../../../shared/components/icons\";\nimport {\n  COLOR_GRAY300,\n  COLOR_GRAY400,\n  COLOR_GRAY700,\n  COLOR_GRAY_LINE,\n  COLOR_PRIMARY,\n  COLOR_WHITE,\n} from \"../../../shared/styles/variables\";\n\nexport type CheckStatus = \"none\" | \"checked\" | \"grouped\" | \"indeterminate\";\n\ntype Props = {\n  label: string;\n  id: string;\n  check: CheckStatus;\n  hasChildren: boolean;\n  isOpen: boolean;\n  isLoading: boolean;\n  toolTipLabel?: string;\n  tag?: string;\n  linkString?: string;\n  linkURL?: string;\n  onClickCheck: (id: string) => void;\n  onToggleChildren: (id: string) => void;\n} & AcceptsEmotion;\n\nexport const TreeBranchView: FC<Props> = ({\n  label,\n  linkString,\n  linkURL,\n  id,\n  check,\n  tag,\n  hasChildren,\n  isOpen,\n  isLoading,\n  onClickCheck,\n  onToggleChildren,\n  children,\n  className,\n  css,\n  toolTipLabel = \"\",\n}) => {\n  return (\n    <li css={[wrapper, css]} className={className}>\n      <div css={inner}>\n        <div css={left}>\n          <span onClick={() => onToggleChildren(id)}>\n            <ToggleIcon {...{ hasChildren, isOpen, isLoading }} />\n          </span>\n          <Tooltip\n            title={toolTipLabel}\n            PopperProps={{ disablePortal: true }}\n            arrow\n            placement={\"top-start\"}\n          >\n            <span>{label}</span>\n          </Tooltip>\n          {tag && <span css={tagTip}>{tag}</span>}\n          {linkString && linkURL && (\n            <a href={linkURL} target=\"_blank\" rel=\"noreferrer\">\n              [{linkString}]\n            </a>\n          )}\n        </div>\n        <Checkbox\n          checked={check === \"checked\" || check === \"grouped\"}\n          indeterminate={check === \"indeterminate\"}\n          onClick={() => onClickCheck(id)}\n        />\n      </div>\n      {isOpen && !!children && <ul css={childrenWrapper}>{children}</ul>}\n    </li>\n  );\n};\n\nconst ToggleIcon: FC<{ hasChildren: boolean; isOpen: boolean; isLoading: boolean }> = ({\n  hasChildren,\n  isOpen,\n  isLoading,\n}) => {\n  if (isLoading) return <IconBlank css={icon} />;\n  if (!hasChildren) return <IconNoChildren css={icon} />;\n  if (isOpen) return <IconCompact css={[icon, clickable]} />;\n  return <IconExpand css={[icon, clickable]} />;\n};\n\nconst wrapper = css`\n  margin-top: -1px;\n  display: flex;\n  width: 100%;\n  flex-direction: column;\n`;\n\nconst inner = css`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  flex-grow: 1;\n  background-color: ${COLOR_WHITE};\n  padding: 0 8px;\n  border: 1px solid ${COLOR_GRAY_LINE};\n`;\n\nconst left = css`\n  display: flex;\n  justify-content: left;\n  align-items: center;\n  gap: 8px;\n  line-height: 1;\n  font-size: 16px;\n  a {\n    font-size: 14px;\n    color: ${COLOR_PRIMARY};\n  }\n`;\n\nconst icon = css`\n  display: block;\n  color: ${COLOR_GRAY300};\n  width: 24px;\n  height: 24px;\n`;\n\nconst clickable = css`\n  cursor: pointer;\n  color: ${COLOR_GRAY700};\n`;\n\nconst childrenWrapper = css`\n  padding-left: 32px;\n`;\nconst tagTip = css`\n  font-size: 12px;\n  background-color: ${COLOR_GRAY400};\n  color: ${COLOR_WHITE};\n  padding: 4px 6px;\n  border-radius: 5px;\n`;\n","import { isArray } from \"yohak-tools/\";\nimport { API_TAXONOMY_CHILDREN } from \"../../../api/paths\";\nimport {\n  TaxonomyChildrenParams,\n  TaxonomyChildrenResponse,\n} from \"../../../api/taxonomy_children/types\";\nimport { getData } from \"../../../shared/utils/getData\";\nimport { TaxonInfo } from \"../states/taxonList\";\n\nexport const retrieveTaxonInfo = (\n  info: TaxonInfo,\n  addTaxonToList: (info: TaxonInfo) => void,\n  setTaxonChildren: (id: string, children: string[]) => void\n) => {\n  (async () => {\n    const params: TaxonomyChildrenParams = {\n      tax_id: info.id,\n    };\n    // console.log(info.id);\n    const response = await getData<TaxonomyChildrenResponse, TaxonomyChildrenParams>(\n      API_TAXONOMY_CHILDREN,\n      params\n    );\n\n    setTaxonChildren(info.id, response?.body?.map((item) => item.tax_id) ?? []);\n    response?.body?.forEach((item) => {\n      addTaxonToList({\n        id: item.tax_id,\n        label: item.name,\n        rank: item.rank,\n        children: item.rank === \"Species\" ? [] : \"not-yet\",\n      });\n    });\n  })();\n};\n\ntype Node = Pick<TaxonInfo, \"id\" | \"children\">;\nexport const findAscendants = (list: Node[], id: string): string[] => {\n  let iterationCount = 0;\n  const result = [];\n  let currentId = id;\n  while (iterationCount < 255) {\n    iterationCount++;\n    const parent = findParent(list, currentId);\n    if (parent) {\n      result.unshift(parent.id);\n      currentId = parent.id;\n    } else {\n      break;\n    }\n  }\n  return result;\n};\n\nexport const findDescendants = (list: Node[], id: string): string[] => {\n  let result: string[] = [];\n  const process = (currentId: string) => {\n    const children = findChildren(list, currentId);\n    if (children && isArray(children)) {\n      result = [...result, ...children];\n      children.forEach((childId) => process(childId));\n    }\n  };\n  process(id);\n  return result;\n};\n\nexport const makeNewSelection = (list: Node[], id: string, selection: string[]): string[] => {\n  const isSelected: boolean = checkIsSelected(id, selection);\n  let result = setSelection(selection, id, !isSelected);\n  let currentId: string;\n  const ascendants = findAscendants(list, id).reverse();\n  const descendants = findDescendants(list, id);\n  if (descendants) {\n    result = setMultipleSelection(result, descendants, false);\n  }\n\n  //\n  const checkedAscendant = ascendants.find((ascendant) => result.includes(ascendant));\n  if (checkedAscendant) {\n    currentId = id;\n    for (let i = 0; i < ascendants.length; i++) {\n      const parent = ascendants[i];\n      result = setSelection(result, parent, false);\n      const siblings = findSiblings(list, currentId);\n      result = setMultipleSelection(result, siblings, true);\n      result = setSelection(result, currentId, false);\n      if (checkedAscendant === parent) {\n        break;\n      }\n      currentId = parent;\n    }\n  }\n\n  currentId = id;\n  for (let i = 0; i < ascendants.length; i++) {\n    const parent = ascendants[i];\n    const siblings = [...findSiblings(list, currentId), currentId];\n    const checkedSiblings = siblings.filter((siblingId) => result.includes(siblingId));\n    if (parent && checkedSiblings.length && checkedSiblings.length === siblings.length) {\n      result = setMultipleSelection(result, checkedSiblings, false);\n      result = setSelection(result, parent, true);\n    }\n    currentId = parent;\n  }\n\n  return result;\n};\n\nconst checkIsSelected = (id: string, selection: string[]): boolean => {\n  return selection.includes(id);\n};\n\nconst setSelection = (selection: string[], id: string, value: boolean): string[] => {\n  const isSelected: boolean = checkIsSelected(id, selection);\n  switch (true) {\n    case isSelected && !value:\n      return selection.filter((item) => item !== id);\n    case !isSelected && value:\n      return [...selection, id];\n    default:\n      return [...selection];\n  }\n};\n\nconst setMultipleSelection = (selection: string[], ids: string[], value: boolean): string[] => {\n  let result = [...selection];\n  ids.forEach((id) => (result = setSelection(result, id, value)));\n  return result;\n};\n\nconst findChildren = (list: Node[], id: string) => list.find((info) => info.id === id)?.children;\nconst findParent = (list: Node[], id: string) => list.find((node) => node.children?.includes(id));\nconst findSiblings = (list: Node[], id: string): string[] => {\n  const children = findParent(list, id)?.children;\n  if (children && isArray(children)) {\n    return children.filter((myId) => myId !== id);\n  } else {\n    return [];\n  }\n};\n","import { atom, useRecoilValue, useSetRecoilState } from \"recoil\";\nimport { TaxonInfo } from \"./taxonList\";\nimport { makeNewSelection } from \"../functions/proessTaxonInfo\";\n\nconst selectedTaxon = atom<string[]>({ key: \"selectedTaxon\", default: [] });\n\nexport const useSelectedTaxonState = () => {\n  return useRecoilValue(selectedTaxon);\n};\n\nexport const useSelectedTaxonMutators = () => {\n  const setSelectedTaxon = useSetRecoilState(selectedTaxon);\n  const clearTaxonSelect = () => {\n    setSelectedTaxon([]);\n  };\n  const updateSelection = (list: TaxonInfo[], id: string) => {\n    setSelectedTaxon((prev) => makeNewSelection(list, id, prev));\n  };\n  return {\n    __setSelectedTaxon: setSelectedTaxon,\n    clearTaxonSelect,\n    updateSelection,\n  };\n};\n","import { atom, useRecoilValue, useSetRecoilState } from \"recoil\";\nimport { Nullable } from \"yohak-tools\";\n\nexport type TaxonInfo = {\n  id: string;\n  rank: string;\n  label: string;\n  children: string[] | \"not-yet\" | \"loading\";\n};\n\nconst taxonList = atom<TaxonInfo[]>({ key: \"taxonList\", default: [] });\n\nexport const useTaxonListState = () => {\n  return useRecoilValue(taxonList);\n};\n\nexport const useTaxonListMutators = () => {\n  const setTaxonList = useSetRecoilState(taxonList);\n  const addTaxonToList = (taxon: TaxonInfo) => {\n    setTaxonList((prev) => [...prev.filter((item) => item.id !== taxon.id), taxon]);\n  };\n  const setTaxonChildren = (id: string, children: string[]) => {\n    setTaxonList((prev) => {\n      const target = prev.find((item) => item.id === id);\n      const filtered = prev.filter((item) => item.id !== id);\n      if (!target) {\n        console.warn(\"no target found\", id);\n        return prev;\n      }\n      return [...filtered, { ...target, children }];\n    });\n  };\n  const setTaxonAsLoading = (id: string) => {\n    setTaxonList((prev) => {\n      const target = prev.find((item) => item.id === id);\n      const filtered = prev.filter((item) => item.id !== id);\n      if (!target) {\n        console.warn(\"no target found\", id);\n        return prev;\n      }\n      return [...filtered, { ...target, children: \"loading\" }];\n    });\n  };\n  return { addTaxonToList, setTaxonAsLoading, setTaxonChildren };\n};\n","import { css } from \"@emotion/react\";\nimport React, { FC, useEffect, useMemo, useState } from \"react\";\nimport { AcceptsEmotion, Optional } from \"yohak-tools\";\nimport { isArray } from \"yohak-tools/\";\nimport { CheckStatus, TreeBranchView } from \"./TreeBranchView\";\nimport { findAscendants, findDescendants, retrieveTaxonInfo } from \"../functions/proessTaxonInfo\";\nimport { useSelectedTaxonMutators, useSelectedTaxonState } from \"../states/selectedTaxon\";\nimport { TaxonInfo, useTaxonListMutators, useTaxonListState } from \"../states/taxonList\";\n\ntype Props = { id: string } & AcceptsEmotion;\n\nexport const TaxonomicTreeBranch: FC<Props> = ({ id, css, className }) => {\n  const taxonList = useTaxonListState();\n  const myInfo: Optional<TaxonInfo> = useMemo(() => {\n    return taxonList.find((item) => item.id === id);\n  }, [taxonList, id]);\n  const { branchChildren, isLoading } = useBranchChildren(myInfo);\n  const { label, rank } = useTaxonInfo(id, myInfo);\n  const { descendants, ascendants } = useLineages(id, taxonList);\n  const { check, onClickCheck } = useChecked(id, taxonList, ascendants, descendants);\n  const { ascendantsLabel } = useAscendantsLabel(ascendants);\n  const [linkString, linkURL] = useLinkString(id, rank);\n  const [isOpen, setIsOpen] = useState<boolean>(false);\n  const onToggleChildren = () => {\n    setIsOpen((prev) => !prev);\n  };\n  return (\n    <TreeBranchView\n      css={css}\n      className={className}\n      label={label}\n      id={id}\n      tag={rank}\n      linkString={linkString}\n      linkURL={linkURL}\n      toolTipLabel={ascendantsLabel}\n      check={check}\n      hasChildren={!!branchChildren.length}\n      isOpen={isOpen}\n      isLoading={isLoading}\n      onClickCheck={() => onClickCheck()}\n      onToggleChildren={onToggleChildren}\n    >\n      {isOpen &&\n        branchChildren.length &&\n        branchChildren.map((childId) => <TaxonomicTreeBranch key={childId} id={childId} />)}\n    </TreeBranchView>\n  );\n};\n\nconst useLinkString = (id: string, rank: string) => {\n  const [linkString, setLinkString] = useState<string>(\"\");\n  const [linkURL, setLinkURL] = useState<string>(\"\");\n  useEffect(() => {\n    setLinkString(`tax_id:${id}`);\n    setLinkURL(`http://growthmedium.org/${rank === \"Species\" ? \"organism\" : \"taxon\"}/${id}`);\n  }, [id, rank]);\n  return [linkString, linkURL];\n};\n\nconst useBranchChildren = (info: Optional<TaxonInfo>) => {\n  const [branchChildren, setBranchChildren] = useState<string[]>([]);\n  const { setTaxonAsLoading, addTaxonToList, setTaxonChildren } = useTaxonListMutators();\n  const [isLoading, setIsLoading] = useState(false);\n  useEffect(() => {\n    setIsLoading(info?.children === \"loading\");\n    if (info?.children === \"not-yet\") {\n      setTaxonAsLoading(info.id);\n      setIsLoading(true);\n      retrieveTaxonInfo(info, addTaxonToList, setTaxonChildren);\n    }\n    if (info && isArray(info.children)) {\n      setBranchChildren(info.children);\n    }\n  }, [info]);\n  return { branchChildren, isLoading };\n};\n\nconst useTaxonInfo = (id: string, myInfo: Optional<TaxonInfo>) => {\n  const [rank, setRank] = useState(\"\");\n  const [label, setLabel] = useState(\"\");\n  useEffect(() => {\n    if (myInfo) {\n      setRank(myInfo.rank);\n      setLabel(myInfo.label);\n    }\n  }, [id, myInfo]);\n  return { rank, label };\n};\n\nconst useChecked = (\n  id: string,\n  taxonList: TaxonInfo[],\n  ascendants: string[],\n  descendants: string[]\n) => {\n  const selectedTaxon = useSelectedTaxonState();\n  const [check, setCheck] = useState<CheckStatus>(\"none\");\n  const { updateSelection } = useSelectedTaxonMutators();\n  const onClickCheck = () => {\n    updateSelection(taxonList, id);\n  };\n\n  useEffect(() => {\n    const isChecked: boolean = !!selectedTaxon.find((taxId) => taxId === id);\n    const isGrouped: boolean = !!selectedTaxon.find((taxId) => ascendants.includes(taxId));\n    const isIndeterminate: boolean = !!selectedTaxon.find((taxId) => descendants.includes(taxId));\n    switch (true) {\n      case isChecked:\n        setCheck(\"checked\");\n        break;\n      case isGrouped:\n        setCheck(\"grouped\");\n        break;\n      case isIndeterminate:\n        setCheck(\"indeterminate\");\n        break;\n      default:\n        setCheck(\"none\");\n    }\n  }, [selectedTaxon, descendants, ascendants, id]);\n  return { check, onClickCheck };\n};\n\nconst useLineages = (id: string, taxonList: TaxonInfo[]) => {\n  const [ascendants, setAscendants] = useState<string[]>([]);\n  const [descendants, setDescendants] = useState<string[]>([]);\n\n  useEffect(() => {\n    setAscendants(findAscendants(taxonList, id));\n    setDescendants(findDescendants(taxonList, id));\n  }, [taxonList, id]);\n\n  return { ascendants, descendants };\n};\n\nconst useAscendantsLabel = (ascendants: string[]) => {\n  const [label, setLabel] = useState<string>(\"\");\n  const taxonList = useTaxonListState();\n  useEffect(() => {\n    setLabel(ascendants.map((id) => taxonList.find((taxon) => taxon.id === id)?.label).join(\" > \"));\n  }, [ascendants]);\n  return { ascendantsLabel: label };\n};\n\nconst taxonomicTreeBranch = css``;\n","import { useEffect } from \"react\";\nimport { TaxonInfo, useTaxonListMutators } from \"../states/taxonList\";\n\nexport const useInitTaxonTree = () => {\n  const { addTaxonToList } = useTaxonListMutators();\n  const process = () => {\n    superkingdoms.forEach((info) => {\n      addTaxonToList(info);\n    });\n  };\n  useEffect(() => {\n    process();\n  }, []);\n};\n\nconst superkingdoms: TaxonInfo[] = [\n  {\n    id: \"2157\",\n    label: \"Archaea\",\n    rank: \"Superkingdom\",\n    children: \"not-yet\",\n  },\n  {\n    id: \"2\",\n    label: \"Bacteria\",\n    rank: \"Superkingdom\",\n    children: \"not-yet\",\n  },\n  {\n    id: \"2759\",\n    label: \"Eukaryota\",\n    rank: \"Superkingdom\",\n    children: \"not-yet\",\n  },\n];\n","import { css } from \"@emotion/react\";\nimport React, { FC, useEffect } from \"react\";\nimport { TaxonomicTreeBranch } from \"./TaxonomicTreeBranch\";\nimport { MediaByTaxonParams, MediaByTaxonResponse } from \"../../../api/media_by_taxon/types\";\nimport { API_MEDIA_BY_TAXON } from \"../../../api/paths\";\nimport { nullResponse, useFoundMediaMutators } from \"../../../shared/state/media-finder/foundMedia\";\nimport { useMediaLoadAbortMutators } from \"../../../shared/state/media-finder/mediaLoadAbort\";\nimport { useQueryDataMutators } from \"../../../shared/state/media-finder/queryData\";\nimport { getData } from \"../../../shared/utils/getData\";\nimport { useInitTaxonTree } from \"../hooks/useInitTaxonTree\";\nimport { useSelectedTaxonState } from \"../states/selectedTaxon\";\n\ntype Props = {};\n\nexport const TaxonomicTreeSection: FC<Props> = () => {\n  useInitTaxonTree();\n  useMediaLoadFromTaxon();\n  return (\n    <div css={[taxonomicTreeSection]}>\n      <div>\n        <TaxonomicTreeBranch id=\"2157\" />\n        <TaxonomicTreeBranch id=\"2\" />\n        <TaxonomicTreeBranch id=\"2759\" />\n      </div>\n    </div>\n  );\n};\n\nconst taxonomicTreeSection = css`\n  //overflow: scroll;\n`;\n\nconst useMediaLoadFromTaxon = () => {\n  const selectedTaxon = useSelectedTaxonState();\n  const { setQueryData } = useQueryDataMutators();\n  const { setFoundMedia } = useFoundMediaMutators();\n  const { setNextMediaLoadAbort } = useMediaLoadAbortMutators();\n  useEffect(() => {\n    if (selectedTaxon.length === 0) {\n      setQueryData({});\n      setFoundMedia(nullResponse);\n      setNextMediaLoadAbort(null);\n      return;\n    }\n    (async () => {\n      const params: MediaByTaxonParams = { tax_ids: selectedTaxon, limit: 10, offset: 0 };\n      setQueryData({ tax_ids: selectedTaxon });\n      const abort: AbortController = new AbortController();\n      setNextMediaLoadAbort(abort);\n      const response = await getData<MediaByTaxonResponse, MediaByTaxonParams>(\n        API_MEDIA_BY_TAXON,\n        params,\n        abort\n      );\n      setNextMediaLoadAbort(null);\n      if (response.body) {\n        setFoundMedia({ ...response.body });\n      }\n    })();\n  }, [selectedTaxon]);\n};\n","import React, { FC } from \"react\";\nimport { TaxonomicTreeSection } from \"./TaxonomicTreeSection\";\nimport { MediaByTaxonParams, MediaByTaxonResponse } from \"../../../api/media_by_taxon/types\";\nimport { API_MEDIA_BY_TAXON } from \"../../../api/paths\";\nimport { subPane, queryPane, wrapper } from \"../../../shared/components/media-finder/appStyles\";\nimport { MediaPane } from \"../../../shared/components/media-finder/MediaPane\";\nimport {\n  FoundMedia,\n  useFoundMediaMutators,\n  useFoundMediaState,\n} from \"../../../shared/state/media-finder/foundMedia\";\nimport { useMediaLoadAbortMutators } from \"../../../shared/state/media-finder/mediaLoadAbort\";\nimport { getData } from \"../../../shared/utils/getData\";\nimport { useSelectedTaxonState } from \"../states/selectedTaxon\";\n\ntype Props = {\n  dispatchEvent: (gmIds: string[]) => void;\n};\n\nexport const AppContainer: FC<Props> = ({ dispatchEvent }) => {\n  const { next, prev } = useMediaPagination();\n  return (\n    <div css={wrapper}>\n      <div css={queryPane}>\n        <TaxonomicTreeSection />\n      </div>\n      <div css={subPane}>\n        <MediaPane dispatchEvent={dispatchEvent} next={next} prev={prev} />\n      </div>\n    </div>\n  );\n};\n\nconst useMediaPagination = () => {\n  const selectedTaxon: string[] = useSelectedTaxonState();\n  const response = useFoundMediaState();\n  const { setNextMediaLoadAbort } = useMediaLoadAbortMutators();\n  const { setFoundMedia } = useFoundMediaMutators();\n  const next = () => {\n    paginate({\n      offset: response.offset + 10,\n      tax_ids: selectedTaxon,\n      abortLoader: setNextMediaLoadAbort,\n      setFoundMedia,\n    });\n  };\n  const prev = () => {\n    paginate({\n      offset: response.offset - 10,\n      tax_ids: selectedTaxon,\n      abortLoader: setNextMediaLoadAbort,\n      setFoundMedia,\n    });\n  };\n\n  return { next, prev };\n};\n\ntype PaginateParams = {\n  offset: number;\n  abortLoader: (abort: AbortController | null) => void;\n  tax_ids: string[];\n  setFoundMedia: (media: FoundMedia) => void;\n};\nconst paginate = async ({ offset, abortLoader, tax_ids, setFoundMedia }: PaginateParams) => {\n  const params: MediaByTaxonParams = { tax_ids, offset, limit: 10 };\n  const abort: AbortController = new AbortController();\n  abortLoader(abort);\n  const response = await getData<MediaByTaxonResponse, MediaByTaxonParams>(\n    API_MEDIA_BY_TAXON,\n    params,\n    abort\n  );\n  abortLoader(null);\n  if (response.body) {\n    setFoundMedia(response.body);\n  }\n};\n","import React, { FC } from \"react\";\nimport { AppContainer } from \"./components/AppContainer\";\n\ntype Props = {\n  stanzaElement?: Document;\n};\n\nconst App: FC<Props> = ({ stanzaElement }) => {\n  const dispatchEvent = (gmIds: string[]) => {\n    if (!stanzaElement) return;\n    //\n    stanzaElement.dispatchEvent(\n      new CustomEvent(\"STANZA_RUN_ACTION\", { bubbles: true, composed: true, detail: gmIds })\n    );\n    console.log(\"dispatch\", { detail: gmIds });\n  };\n\n  return <AppContainer dispatchEvent={dispatchEvent} />;\n};\n\nexport default App;\n","import { ThemeProvider } from \"@mui/material/styles\";\nimport React, { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { RecoilRoot } from \"recoil\";\nimport Stanza from \"togostanza/stanza\";\nimport App from \"./App\";\nimport { EmotionCacheProvider } from \"../../shared/components/EmotionCacheProvider\";\nimport { muiTheme } from \"../../shared/components/muiTheme\";\nimport { importWebFontForTogoMedium } from \"../../shared/utils/stanza\";\n\nexport default class HelloReact extends Stanza<StanzaParameters> {\n  async render() {\n    this._render();\n    importWebFontForTogoMedium(this);\n  }\n\n  handleAttributeChange() {\n    this._render();\n  }\n\n  _render() {\n    const main = this.root.querySelector(\"main\");\n    ReactDOM.render(\n      <StrictMode>\n        <RecoilRoot>\n          <ThemeProvider theme={muiTheme}>\n            <EmotionCacheProvider>\n              <App stanzaElement={this.root} />\n            </EmotionCacheProvider>\n          </ThemeProvider>\n        </RecoilRoot>\n      </StrictMode>,\n      main\n    );\n  }\n}\n\ntype StanzaParameters = {};\n"],"names":["_jsxs","_jsx","isArray","atom","useRecoilValue","useSetRecoilState","useMemo","useState","useEffect","wrapper","StrictMode","RecoilRoot"],"mappings":"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"}