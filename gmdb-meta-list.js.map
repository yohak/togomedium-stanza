{"version":3,"file":"gmdb-meta-list.js","sources":["../../../home/runner/work/togomedium-stanza/togomedium-stanza/stanzas/gmdb-meta-list/index.ts"],"sourcesContent":["import Stanza from \"togostanza/stanza\";\nimport { makeFormBody } from \"../../shared/utils/getData\";\nimport { importWebFontForTogoMedium } from \"../../shared/utils/stanza\";\nimport { convertHTMLEntity } from \"../../shared/utils/string\";\nimport { ApiResponse, SimpleObject, TemplateBase } from \"../../shared/utils/types\";\n\nexport default class GmdbMetaList extends Stanza<StanzaParameters> {\n  async render() {\n    const params = this.params;\n    if (!params.api_url) {\n      return;\n    }\n    const offset: number = 0;\n    const data = await fetchData(params.api_url, offset, parseInt(params.limit, 10));\n    const templateParams: TemplateParameters = processData(data, offset, params);\n    render(this, templateParams, params);\n  }\n}\n\nconst render = (stanza: Stanza, parameters: TemplateParameters, stanzaParams: StanzaParameters) => {\n  const limit: number = parseInt(stanzaParams.limit, 10);\n  stanza.renderTemplate<TemplateParameters>({\n    template: \"stanza.html.hbs\",\n    parameters,\n  });\n  importWebFontForTogoMedium(stanza, stanzaParams.web_font);\n  stanza.root.querySelector(\"#btnPrev\")?.addEventListener(\"click\", async () => {\n    await movePage(stanza, parameters, stanzaParams, limit, DIRECTION.PREV);\n  });\n  stanza.root.querySelector(\"#btnNext\")?.addEventListener(\"click\", async () => {\n    await movePage(stanza, parameters, stanzaParams, limit, DIRECTION.NEXT);\n  });\n};\n\nconst movePage = async (\n  stanza: Stanza,\n  templateParams: TemplateParameters,\n  stanzaParams: StanzaParameters,\n  limit: number,\n  direction: DIRECTION\n) => {\n  render(stanza, { ...templateParams, isLoading: true }, stanzaParams);\n  const offset = templateParams.offset + limit * direction;\n  const data = await fetchData(stanzaParams.api_url, offset, limit);\n  const params: TemplateParameters = processData(data, offset, stanzaParams);\n  render(stanza, params, stanzaParams);\n};\n\nconst processData = (\n  response: ApiResponse<ApiBody>,\n  offset: number,\n  stanzaParams: StanzaParameters\n): TemplateParameters => {\n  switch (response.status) {\n    case 200:\n      return makeSuccessData(response, offset, stanzaParams);\n    default:\n      return makeFailParams(response, stanzaParams);\n  }\n};\n\nconst makeSuccessData = (\n  response: ApiResponse<ApiBody>,\n  offset: number,\n  stanzaParams: StanzaParameters\n): TemplateParameters => {\n  if (response.body!.contents.length === 0) {\n    return makeNotFoundParams(stanzaParams);\n  }\n\n  const column_sizes: number[] | undefined = stanzaParams.column_sizes\n    ?.split(\",\")\n    .map((str) => parseInt(str));\n  const columns: {\n    label: string;\n    size: number | undefined;\n  }[] = response.body!.columns.map((item, i) => ({\n    label: item.label,\n    size: column_sizes ? column_sizes[i] : undefined,\n  }));\n  const keys: string[] = response.body!.columns.map((item) => item.key);\n  const noWraps: { [key: string]: boolean | undefined } = {};\n  response.body!.columns.forEach((item) => (noWraps[item.key] = item.nowrap));\n  const data: Item[][] = response.body!.contents.map((item) => {\n    const result: Item[] = [];\n    keys.forEach((key) => {\n      let value: StringItem;\n      if (typeof item[key] === \"string\") {\n        value = { label: item[key] as string };\n      } else {\n        value = item[key] as LinkItem;\n      }\n      if (noWraps[key]) {\n        value.nowrap = true;\n      }\n      result.push(value);\n      value.label = convertHTMLEntity(value.label);\n    });\n    return result;\n  });\n  const total: number = response.body!.total;\n  const _end: number = parseInt(stanzaParams.limit, 10) + offset;\n  const end: number = _end <= total ? _end : total;\n  const hasPrev: boolean = offset !== 0;\n  const hasNext: boolean = end < total;\n  const title: string = stanzaParams.title;\n  const info: string =\n    hasNext || hasPrev\n      ? `showing ${offset + 1} to ${end} of total ${total} items`\n      : `total ${total} items`;\n  const _columns: string = stanzaParams.column_names;\n  const showColumnNames: boolean =\n    _columns.toLocaleLowerCase() === \"false\" ? false : Boolean(stanzaParams.column_names);\n  const isFixedTable: boolean = !!columns.find((item) => !!item.size);\n\n  return {\n    title,\n    offset,\n    columns,\n    data,\n    hasNext,\n    hasPrev,\n    info,\n    showColumnNames,\n    isFixedTable,\n    status: 200,\n    statusText: \"\",\n  };\n};\n\nconst makeNotFoundParams = (stanzaParams: StanzaParameters): TemplateParameters => {\n  return {\n    title: stanzaParams.title,\n    offset: 0,\n    columns: undefined,\n    data: undefined,\n    hasNext: false,\n    hasPrev: false,\n    info: undefined,\n    showColumnNames: false,\n    isFixedTable: false,\n    status: undefined,\n    statusText: \"NO RESULT FOUND\",\n  };\n};\n\nconst makeFailParams = (\n  response: ApiResponse<ApiBody>,\n  stanzaParams: StanzaParameters\n): TemplateParameters => {\n  return {\n    title: stanzaParams.title,\n    offset: 0,\n    columns: undefined,\n    data: undefined,\n    hasNext: false,\n    hasPrev: false,\n    info: undefined,\n    showColumnNames: false,\n    isFixedTable: false,\n    status: response.status,\n    statusText: response.status ? response.message : \"UNKNOWN ERROR\",\n  };\n};\n\nconst fetchData = async (\n  url: string,\n  offset: number,\n  limit: number\n): Promise<ApiResponse<ApiBody>> => {\n  // return fetchDummy(query, offset, limit);\n  return fetchLive(url, offset, limit);\n};\n\nconst fetchLive = async (\n  url: string,\n  offset: number,\n  limit: number\n): Promise<ApiResponse<ApiBody>> => {\n  const [uri, query]: [string, string] = separateURL(url);\n  const response = await fetch(uri, makeOptions({ offset, limit }, query));\n  if (response.status !== 200) {\n    return {\n      status: response.status,\n      message: response.statusText,\n      body: undefined,\n    };\n  }\n  const body: any = await response.json();\n  return {\n    status: 200,\n    body,\n  };\n};\n\nconst makeOptions = (params: SimpleObject, query: string): RequestInit => {\n  const body = `${filterQuery(query)}&${makeFormBody(params)}`;\n\n  return {\n    method: \"POST\",\n    mode: \"cors\",\n    body,\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/x-www-form-urlencoded\",\n    },\n  };\n};\n\nconst filterQuery = (query: string | null): string => {\n  if (!query) {\n    return \"\";\n  }\n  let isOmitted: boolean = false;\n  const result: string = query\n    .split(\"&\")\n    .filter((str) => {\n      const reg = /(.*)=(.*)/.exec(str);\n      const [key, value]: [string, string] = [reg![1], reg![2]];\n      switch (key) {\n        case \"limit\":\n        case \"offset\":\n          isOmitted = true;\n          return false;\n        default:\n          return true;\n      }\n    })\n    .join(\"&\");\n  if (isOmitted) {\n    console.warn(\"limit and offset on API_URL have been omitted as they are set from the Stanza\");\n  }\n  // console.log(result);\n  return result;\n};\n\nconst separateURL = (url: string): [string, string] => {\n  const separated = /(.*)\\?(.*)/.exec(url);\n  let uri, query;\n  if (separated) {\n    uri = separated[1];\n    query = separated[2];\n  } else {\n    uri = url;\n    query = \"\";\n  }\n  return [uri, query];\n};\n\nexport const __TEST__ = { separateURL, filterQuery, makeFormBody };\n\nenum DIRECTION {\n  NEXT = 1,\n  PREV = -1,\n}\n\ntype Item = StringItem | LinkItem;\n\ntype StanzaParameters = {\n  api_url: string;\n  limit: string;\n  title: string;\n  column_names: string;\n  web_font?: string;\n  column_sizes?: string;\n};\n\ntype TemplateParameters = {\n  columns: { label: string; size: number | undefined }[] | undefined;\n  data: Item[][] | undefined;\n  offset: number;\n  title: string;\n  hasNext: boolean;\n  hasPrev: boolean;\n  info: string | undefined;\n  showColumnNames: boolean;\n  isFixedTable: boolean;\n} & TemplateBase;\n\ntype ApiBody<T extends string = string> = {\n  total: number;\n  offset: number;\n  limit: number;\n  contents: Content<T>[];\n  columns: Column<T>[];\n};\n\ntype Content<T extends string> = {\n  [Key in T]: LinkItem | string;\n};\n\ntype LinkItem = {\n  href: string;\n  label: string;\n  nowrap?: boolean;\n};\ntype StringItem = {\n  label: string;\n  nowrap?: boolean;\n};\n\ntype Column<T extends string> = {\n  key: T;\n  label: string;\n  nowrap?: boolean;\n  size?: number;\n};\n\nexport type ListApiBody<T extends string = string> = ApiBody<T>;\nexport type ListContent<T extends string = string> = Content<T>;\nexport type ListColumn<T extends string = string> = Column<T>;\n"],"names":[],"mappings":"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"}