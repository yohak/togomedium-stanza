{"version":3,"file":"gmdb-strain-by-strainid.js","sources":["../../../home/runner/work/togomedium-stanza/togomedium-stanza/stanzas/gmdb-strain-by-strainid/components/StanzaView.tsx","../../../home/runner/work/togomedium-stanza/togomedium-stanza/stanzas/gmdb-strain-by-strainid/utils/api.ts","../../../home/runner/work/togomedium-stanza/togomedium-stanza/stanzas/gmdb-strain-by-strainid/App.tsx","../../../home/runner/work/togomedium-stanza/togomedium-stanza/stanzas/gmdb-strain-by-strainid/index.tsx"],"sourcesContent":["import { css } from \"@emotion/react\";\nimport React, { ComponentProps, FC } from \"react\";\nimport { AcceptsEmotion, Nullable } from \"yohak-tools\";\nimport { LineageList } from \"../../../shared/components/info-detail/LineageList\";\nimport {\n  ColorButton,\n  ColWrapper,\n  InfoId,\n  InfoTitle,\n  SubHeading,\n  TagList,\n} from \"../../../shared/components/info-detail/styles\";\nimport { stanzaWrapper } from \"../../../shared/styles/common\";\n\ntype Props = {\n  strainId: string;\n  strainName: string;\n  infoSources: {\n    label: string;\n    url: string;\n  }[];\n  taxonomy: Nullable<{\n    name: string;\n    taxId: string;\n    rank: string;\n    authorityName: string;\n    lineage: ComponentProps<typeof LineageList>[\"lineage\"];\n  }>;\n} & AcceptsEmotion;\n\nexport const StanzaView: FC<Props> = ({\n  css,\n  className,\n  strainId,\n  strainName,\n  infoSources,\n  taxonomy,\n}) => {\n  return (\n    <div css={[stanzaView, css, stanzaWrapper]} className={className}>\n      <ColWrapper>\n        <div>\n          <InfoId>\n            <span>Strain Id: </span>\n            <span>{strainId}</span>\n          </InfoId>\n          <InfoTitle>{strainName}</InfoTitle>\n          <SubHeading>Source strains</SubHeading>\n          <TagList>\n            {infoSources.map((source, index) => (\n              <ColorButton key={index} href={source.url} target={\"_blank\"} rel=\"noreferrer\">\n                {source.label}\n              </ColorButton>\n            ))}\n          </TagList>\n          {taxonomy && (\n            <div>\n              <SubHeading>Taxonomic Lineage</SubHeading>\n              <LineageList lineage={taxonomy.lineage} />\n            </div>\n          )}\n        </div>\n      </ColWrapper>\n    </div>\n  );\n};\nconst stanzaView = css``;\n","import { ComponentProps } from \"react\";\nimport { Optional } from \"yohak-tools\";\nimport { getData } from \"../../../shared/utils/getData\";\nimport { URL_API } from \"../../../shared/utils/variables\";\nimport { StanzaView } from \"../components/StanzaView\";\n\nexport type ViewProps = ComponentProps<typeof StanzaView>;\nexport type ApiBody = {\n  strain: {\n    strain_id: string;\n    strain_name: string;\n    other_strain_id_list: {\n      other_strain_id: string;\n      other_strain_link: string;\n    }[];\n  };\n  taxonomy: {\n    scientific_name: string;\n    taxid: number;\n    rank: string;\n    authority_name: string;\n    lineage: {\n      uri: string;\n      taxid: number;\n      label: string;\n      rank: string;\n    }[];\n  };\n};\n\nconst parseData = (body: ApiBody): ViewProps => {\n  const strainId = body.strain.strain_id;\n  const strainName = body.strain.strain_name;\n  const infoSources = body.strain.other_strain_id_list.map((item) => ({\n    url: item.other_strain_link,\n    label: item.other_strain_id,\n  }));\n  const taxonomy: ViewProps[\"taxonomy\"] = body.taxonomy\n    ? {\n        name: body.taxonomy.scientific_name,\n        taxId: body.taxonomy.taxid.toString(),\n        rank: body.taxonomy.rank,\n        authorityName: body.taxonomy.authority_name,\n        lineage: body.taxonomy.lineage.reduce((accum, current) => {\n          return {\n            ...accum,\n            [current.rank]: {\n              taxid: current.taxid.toString(),\n              label: current.label,\n            },\n          };\n        }, {}),\n      }\n    : null;\n  return {\n    strainId,\n    strainName,\n    infoSources,\n    taxonomy,\n  };\n};\n\nexport const getStrainData = async (strain_id: string): Promise<Optional<ViewProps>> => {\n  const apiName = \"gmdb_strain_by_strainid\";\n  const result = await getData<ApiBody>(`${URL_API}${apiName}`, { strain_id });\n  if (result.body?.strain) {\n    return parseData(result.body);\n  } else {\n    return undefined;\n  }\n};\n","import React, { FC, useEffect, useState } from \"react\";\nimport { Optional } from \"yohak-tools\";\nimport { StanzaView } from \"./components/StanzaView\";\nimport { getStrainData, ViewProps } from \"./utils/api\";\n\ntype Props = {\n  stanzaElement?: Document;\n  strain_id: string;\n};\n\nconst App: FC<Props> = ({ strain_id }) => {\n  const [props, setProps] = useState<Optional<ViewProps>>(undefined);\n  useEffect(() => {\n    (async () => {\n      const result = await getStrainData(strain_id);\n      if (!result) return;\n      setProps(result);\n    })();\n  }, [strain_id]);\n  return props ? <StanzaView {...props} /> : <></>;\n};\n\nexport default App;\n","import { ThemeProvider } from \"@mui/material/styles\";\nimport React, { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { RecoilRoot } from \"recoil\";\nimport Stanza from \"togostanza/stanza\";\nimport App from \"./App\";\nimport { EmotionCacheProvider } from \"../../shared/components/EmotionCacheProvider\";\nimport { muiTheme } from \"../../shared/components/muiTheme\";\nimport { importWebFontForTogoMedium } from \"../../shared/utils/stanza\";\n\nexport default class HelloReact extends Stanza<StanzaParameters> {\n  async render() {\n    this._render();\n    importWebFontForTogoMedium(this);\n  }\n\n  handleAttributeChange() {\n    this._render();\n  }\n\n  _render() {\n    const main = this.root.querySelector(\"main\");\n    const strain_id = this.params.strain_id;\n    ReactDOM.render(\n      <StrictMode>\n        <RecoilRoot>\n          <ThemeProvider theme={muiTheme}>\n            <EmotionCacheProvider>\n              <App stanzaElement={this.root} strain_id={strain_id} />\n            </EmotionCacheProvider>\n          </ThemeProvider>\n        </RecoilRoot>\n      </StrictMode>,\n      main\n    );\n  }\n}\n\ntype StanzaParameters = {\n  strain_id: string;\n};\n"],"names":["_jsx","_jsxs","useState","useEffect","StrictMode","RecoilRoot"],"mappings":"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"}